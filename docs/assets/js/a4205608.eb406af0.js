"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[120],{3905:function(t,e,r){r.d(e,{Zo:function(){return c},kt:function(){return k}});var n=r(7294);function a(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function i(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function s(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?i(Object(r),!0).forEach((function(e){a(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function o(t,e){if(null==t)return{};var r,n,a=function(t,e){if(null==t)return{};var r,n,a={},i=Object.keys(t);for(n=0;n<i.length;n++)r=i[n],e.indexOf(r)>=0||(a[r]=t[r]);return a}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(n=0;n<i.length;n++)r=i[n],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(a[r]=t[r])}return a}var p=n.createContext({}),l=function(t){var e=n.useContext(p),r=e;return t&&(r="function"==typeof t?t(e):s(s({},e),t)),r},c=function(t){var e=l(t.components);return n.createElement(p.Provider,{value:e},t.children)},u={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},d=n.forwardRef((function(t,e){var r=t.components,a=t.mdxType,i=t.originalType,p=t.parentName,c=o(t,["components","mdxType","originalType","parentName"]),d=l(r),k=a,f=d["".concat(p,".").concat(k)]||d[k]||u[k]||i;return r?n.createElement(f,s(s({ref:e},c),{},{components:r})):n.createElement(f,s({ref:e},c))}));function k(t,e){var r=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var i=r.length,s=new Array(i);s[0]=d;var o={};for(var p in e)hasOwnProperty.call(e,p)&&(o[p]=e[p]);o.originalType=t,o.mdxType="string"==typeof t?t:a,s[1]=o;for(var l=2;l<i;l++)s[l]=r[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},607:function(t,e,r){r.r(e),r.d(e,{frontMatter:function(){return o},contentTitle:function(){return p},metadata:function(){return l},toc:function(){return c},default:function(){return d}});var n=r(7462),a=r(3366),i=(r(7294),r(3905)),s=["components"],o={id:"sdk-services-application",title:"Application",sidebar_label:"Application"},p=void 0,l={unversionedId:"sdk-services-application",id:"sdk-services-application",title:"Application",description:"Service to manage the lifecycle of verification requests on the Bridge Network",source:"@site/docs/sdk-services-application.md",sourceDirName:".",slug:"/sdk-services-application",permalink:"/docs/sdk-services-application",tags:[],version:"current",frontMatter:{id:"sdk-services-application",title:"Application",sidebar_label:"Application"},sidebar:"gettingStarted",previous:{title:"Payment",permalink:"/docs/sdk-messaging-payment"},next:{title:"Blockchain",permalink:"/docs/sdk-services-blockchain"}},c=[{value:"Functions",id:"functions",children:[{value:"createApplication()",id:"createapplication",children:[],level:3},{value:"getApplicationList()",id:"getapplicationlist",children:[],level:3},{value:"getApplication()",id:"getapplication",children:[],level:3},{value:"updatePaymentTransaction()",id:"updatepaymenttransaction",children:[],level:3},{value:"retry()",id:"retry",children:[],level:3}],level:2}],u={toc:c};function d(t){var e=t.components,r=(0,a.Z)(t,s);return(0,i.kt)("wrapper",(0,n.Z)({},u,r,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Service to manage the lifecycle of verification requests on the Bridge Network"),(0,i.kt)("h2",{id:"functions"},"Functions"),(0,i.kt)("h3",{id:"createapplication"},"createApplication()"),(0,i.kt)("p",null,"Create a new verification request for the passport with a specified partner"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"async createApplication(passport, passphrase, partner, network, address)\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"passport")," (",(0,i.kt)("a",{href:"sdk-models-passport"},"Passport"),") - passport context used for API authentication"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"passphrase")," (string) - password used to unlock context passport private key"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"partner")," (string) - the passport id of the target partner,"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"network")," (string) - the blockchain network to pay network fees on"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"address")," (string) - the bloockchain address fees will be paid from")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"getapplicationlist"},"getApplicationList()"),(0,i.kt)("p",null,"Retrieve all verification requests for the passport"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"async getApplicationList(passport, passphrase)\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"passport")," (",(0,i.kt)("a",{href:"sdk-models-passport"},"Passport"),") - passport context used for API authentication"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"passphrase")," (string) - password used to unlock context passport private key")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"getapplication"},"getApplication()"),(0,i.kt)("p",null,"Retrieve the full details of a specific verification request"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"async getApplication(passport, passphrase, id)\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"passport")," (",(0,i.kt)("a",{href:"sdk-models-passport"},"Passport"),") - passport context used for API authentication"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"passphrase")," (string) - password used to unlock context passport private key"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"id")," (string) - unique identifier of the verification request")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"updatepaymenttransaction"},"updatePaymentTransaction()"),(0,i.kt)("p",null,"Updates an existing verification request with payment transaction information for network fee payment"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"async updatePaymentTransaction(passport, passphrase, id, transactionId)\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"passport")," (",(0,i.kt)("a",{href:"sdk-models-passport"},"Passport"),") - passport context used for API authentication"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"passphrase")," (string) - password used to unlock context passport private key"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"id")," (string) - the unique identifier of the verification request"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"transactionId")," (string) - the blockchain transaction id of the payment")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"retry"},"retry()"),(0,i.kt)("p",null,"Attempt to (re)process and send the verification request to the verifiation partner on the Bridge Network.  If a prior attempt has failed, this is used to re-attempt transmission."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"async retry(passport, passphrase, id)\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"passport")," (",(0,i.kt)("a",{href:"sdk-models-passport"},"Passport"),") - passport context used for API authentication"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"passphrase")," (string) - password used to unlock context passport private key"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"id")," - the unique identifier of the verification request")))}d.isMDXComponent=!0}}]);