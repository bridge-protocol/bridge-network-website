"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2382],{3905:function(e,t,r){r.d(t,{Zo:function(){return p},kt:function(){return f}});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var c=a.createContext({}),s=function(e){var t=a.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=s(e.components);return a.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(r),f=n,k=u["".concat(c,".").concat(f)]||u[f]||m[f]||i;return r?a.createElement(k,o(o({ref:t},p),{},{components:r})):a.createElement(k,o({ref:t},p))}));function f(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,o=new Array(i);o[0]=u;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:n,o[1]=l;for(var s=2;s<i;s++)o[s]=r[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}u.displayName="MDXCreateElement"},1124:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return s},toc:function(){return p},default:function(){return u}});var a=r(7462),n=r(3366),i=(r(7294),r(3905)),o=["components"],l={id:"sdk-utils-claim",title:"Claim",sidebar_label:"Claim"},c=void 0,s={unversionedId:"sdk-utils-claim",id:"sdk-utils-claim",title:"Claim",description:"Utility functions for interacting with one or more ClaimPackage",source:"@site/docs/sdk-utils-claim.md",sourceDirName:".",slug:"/sdk-utils-claim",permalink:"/docs/sdk-utils-claim",tags:[],version:"current",frontMatter:{id:"sdk-utils-claim",title:"Claim",sidebar_label:"Claim"},sidebar:"gettingStarted",previous:{title:"Request Relay",permalink:"/docs/sdk-services-relay"},next:{title:"Overview",permalink:"/docs/integration"}},p=[{value:"Functions",id:"functions",children:[{value:"createClaimPackagesFromClaims()",id:"createclaimpackagesfromclaims",children:[],level:3},{value:"verifyClaimPackagesForImport()",id:"verifyclaimpackagesforimport",children:[],level:3}],level:2}],m={toc:p};function u(e){var t=e.components,r=(0,n.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Utility functions for interacting with one or more ",(0,i.kt)("a",{href:"sdk-models-claimpackage"},"ClaimPackage")),(0,i.kt)("h2",{id:"functions"},"Functions"),(0,i.kt)("h3",{id:"createclaimpackagesfromclaims"},"createClaimPackagesFromClaims()"),(0,i.kt)("p",null,"Creates encrypted claim packages from the provided claims"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"async createClaimPackagesFromClaims(claims, targetPublicKey, passportPublicKey, passportPrivateKey, password)\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"claims")," (",(0,i.kt)("a",{href:"sdk-models-claim"},"Claim"),"[]) - claims to create claim packages from"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"targetPublicKey")," - the public key of the passport the claims will be signed and encrypted for"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"passportPublicKey")," - the public key of the signing and encrypting passport"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"passportPrivateKey")," - the private key of the signing and encrypting passport"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"password")," - the password to unlock the private key of the signing and encrypting passport")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"verifyclaimpackagesforimport"},"verifyClaimPackagesForImport()"),(0,i.kt)("p",null,"Verifies the integrity of claim packages to ensure they are suitable for import to the passport"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"async verifyClaimPackagesForImport(passport, password, claimPackages)\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"passport")," (",(0,i.kt)("a",{href:"sdk-models-passport"},"Passport"),") - The passport receiving the claim packages for import"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"password")," (string) - the password to unlock the private key of the receiving passport"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"claimPackages")," (",(0,i.kt)("a",{href:"sdk-models-claimpackage"},"ClaimPackage"),"[]) - the claim packages to be imported")))}u.isMDXComponent=!0}}]);