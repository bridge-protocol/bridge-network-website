"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4740],{3905:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return y}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),l=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=l(e.components);return a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,p=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),c=l(n),y=r,d=c["".concat(p,".").concat(y)]||c[y]||u[y]||s;return n?a.createElement(d,i(i({ref:t},m),{},{components:n})):a.createElement(d,i({ref:t},m))}));function y(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,i=new Array(s);i[0]=c;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var l=2;l<s;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},7745:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return p},metadata:function(){return l},toc:function(){return m},default:function(){return c}});var a=n(7462),r=n(3366),s=(n(7294),n(3905)),i=["components"],o={id:"messaging-payment",title:"Payment",sidebar_label:"Payment"},p=void 0,l={unversionedId:"messaging-payment",id:"messaging-payment",title:"Payment",description:"The payment protocol is used by a passport that wishes to request payments in BRDG token from another passport.",source:"@site/docs/messaging-payment.md",sourceDirName:".",slug:"/messaging-payment",permalink:"/docs/messaging-payment",tags:[],version:"current",frontMatter:{id:"messaging-payment",title:"Payment",sidebar_label:"Payment"},sidebar:"gettingStarted",previous:{title:"Claims Import",permalink:"/docs/messaging-claimsimport"},next:{title:"Overview",permalink:"/docs/sdk"}},m=[{value:"Creating a Payment Request",id:"creating-a-payment-request",children:[],level:2},{value:"Receiving a Payment Request",id:"receiving-a-payment-request",children:[],level:2},{value:"Creating a Payment Response",id:"creating-a-payment-response",children:[],level:2},{value:"Verifying a Payment Response",id:"verifying-a-payment-response",children:[],level:2}],u={toc:m};function c(e){var t=e.components,n=(0,r.Z)(e,i);return(0,s.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"The payment protocol is used by a passport that wishes to request payments in BRDG token from another passport."),(0,s.kt)("img",{class:"centered",src:"/img/message-payment.png"}),(0,s.kt)("hr",null),(0,s.kt)("h2",{id:"creating-a-payment-request"},"Creating a Payment Request"),(0,s.kt)("p",null,"A passport can request payment from another passport by creating a payment request."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"let wallet = passport.getWalletForNetwork(network);\nlet paymentRequest = await Bridge.Messaging.Payment.createPaymentRequest(passport, password, wallet.network, amount, wallet.address, paymentIdentifier);\n")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"wallet")," - the blockchain wallet to request payment be sent to"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"paymentRequest")," -  the payment request message to be sent to the target passport")),(0,s.kt)("hr",null),(0,s.kt)("h2",{id:"receiving-a-payment-request"},"Receiving a Payment Request"),(0,s.kt)("p",null,"The receiving passport will receive the payment request and verify the integrity of the message and the passport that sent the request."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"let verifiedPaymentRequest = await Bridge.Messaging.Payment.verifyPaymentRequest(paymentRequest);\nlet passportDetails = await Bridge.Services.Passport.getDetails(passport, password, verifiedPaymentRequest.passportId);\n")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"paymentRequest")," - the payment request message received from the sending passport"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"verifiedPaymentRequest")," - the integrity verified data transmitted via the payment request message"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"passportDetails")," - the information received from the Bridge Network about the passport that sent the request message")),(0,s.kt)("hr",null),(0,s.kt)("h2",{id:"creating-a-payment-response"},"Creating a Payment Response"),(0,s.kt)("p",null,"The receiving passport will send the requested payment on the requested blockchain network and create a response message that includes the blockchain transaction information about the payment."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"let wallet = passport.getWalletForNetwork(paymentRequest.network);\nawait wallet.unlock(password);\nlet transactionId = await Bridge.Services.Blockchain.sendPayment(wallet, paymentRequest.amount, paymentRequest.address, paymentRequest.identifier, false);\nlet paymentResponse = await Bridge.Messaging.Payment.createPaymentResponse(passport, password, paymentRequest.network, wallet.address, paymentRequest.amount, paymentRequest.address, paymentRequest.identifier, transactionId, targetPublicKey);\n")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"wallet")," - the blockchain wallet to send payment from"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"transactionId")," - the resulting transaction identifier for the blockchain payment transaction"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"paymentResponse")," - the payment response message to be sent back to the sender to confirm the payment transaction")),(0,s.kt)("hr",null),(0,s.kt)("h2",{id:"verifying-a-payment-response"},"Verifying a Payment Response"),(0,s.kt)("p",null,"The passport that sent the payment request recieves the payment response and verifies the blockchain transaction information for the payment."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"let verifiedPaymentResponse = await Bridge.Messaging.Payment.verifyPaymentResponse(passport, _password, paymentResponse);\nlet verifiedPayment = await Bridge.Services.Blockchain.verifyPayment(verifiedPaymentResponse.network, verifiedPaymentResponse.transactionId, verifiedPaymentResponse.from, verifiedPaymentResponse.address, verifiedPaymentResponse.amount, verifiedPaymentResponse.identifier);\n")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"paymentResponse")," - the payment response message received from the sender"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"verifiedPaymentResponse")," - the integrity verified data transmitted via the payment response message"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"verifiedPayment")," - the verified payment info about the payment")))}c.isMDXComponent=!0}}]);