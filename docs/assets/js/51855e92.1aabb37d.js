"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6312],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return c}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function p(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var i=n.createContext({}),o=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):p(p({},t),e)),r},u=function(e){var t=o(e.components);return n.createElement(i.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,s=e.originalType,i=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=o(r),c=a,k=m["".concat(i,".").concat(c)]||m[c]||d[c]||s;return r?n.createElement(k,p(p({ref:t},u),{},{components:r})):n.createElement(k,p({ref:t},u))}));function c(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=r.length,p=new Array(s);p[0]=m;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:a,p[1]=l;for(var o=2;o<s;o++)p[o]=r[o];return n.createElement.apply(null,p)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},9153:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return l},contentTitle:function(){return i},metadata:function(){return o},toc:function(){return u},default:function(){return m}});var n=r(7462),a=r(3366),s=(r(7294),r(3905)),p=["components"],l={id:"integration-passport",title:"Passport",sidebar_label:"Passport"},i=void 0,o={unversionedId:"integration-passport",id:"integration-passport",title:"Passport",description:"The passport endpoints expose all passport and peer-to-peer messaging functionality.",source:"@site/docs/integration-passport.md",sourceDirName:".",slug:"/integration-passport",permalink:"/docs/integration-passport",tags:[],version:"current",frontMatter:{id:"integration-passport",title:"Passport",sidebar_label:"Passport"},sidebar:"gettingStarted",previous:{title:"Overview",permalink:"/docs/integration"},next:{title:"Claim",permalink:"/docs/integration-claim"}},u=[{value:"GET /passport/id",id:"get-passportid",children:[],level:3},{value:"GET /passport/publicKey",id:"get-passportpublickey",children:[],level:3},{value:"POST /passport/details",id:"post-passportdetails",children:[{value:"Example Request:",id:"example-request",children:[],level:5},{value:"Example Response:",id:"example-response",children:[],level:5}],level:3},{value:"POST /passport/idfromkey",id:"post-passportidfromkey",children:[{value:"Example Request:",id:"example-request-1",children:[],level:5}],level:3},{value:"POST /passport/sign",id:"post-passportsign",children:[{value:"Example Request:",id:"example-request-2",children:[],level:5}],level:3},{value:"POST /passport/verify",id:"post-passportverify",children:[{value:"Example Request:",id:"example-request-3",children:[],level:5}],level:3},{value:"POST /passport/verifyhash",id:"post-passportverifyhash",children:[{value:"Example Request:",id:"example-request-4",children:[],level:5}],level:3},{value:"POST /passport/encrypt",id:"post-passportencrypt",children:[{value:"Example Request:",id:"example-request-5",children:[],level:5}],level:3},{value:"POST /passport/decrypt",id:"post-passportdecrypt",children:[{value:"Example Request:",id:"example-request-6",children:[],level:5}],level:3},{value:"POST /passport/requestclaimsimport",id:"post-passportrequestclaimsimport",children:[{value:"Example Request:",id:"example-request-7",children:[],level:5}],level:3},{value:"POST /passport/requestauth",id:"post-passportrequestauth",children:[{value:"Example Request:",id:"example-request-8",children:[],level:5}],level:3},{value:"POST /passport/verifyauth",id:"post-passportverifyauth",children:[{value:"Example Request:",id:"example-request-9",children:[],level:5},{value:"Example Response:",id:"example-response-1",children:[],level:5}],level:3},{value:"POST /passport/requestpayment",id:"post-passportrequestpayment",children:[{value:"Example Request:",id:"example-request-10",children:[],level:5}],level:3},{value:"POST /passport/verifypayment",id:"post-passportverifypayment",children:[{value:"Example Request:",id:"example-request-11",children:[],level:5},{value:"Example Response:",id:"example-response-2",children:[],level:5}],level:3}],d={toc:u};function m(e){var t=e.components,r=(0,a.Z)(e,p);return(0,s.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"The passport endpoints expose all passport and peer-to-peer messaging functionality."),(0,s.kt)("h3",{id:"get-passportid"},"GET /passport/id"),(0,s.kt)("p",null,"Retrieves the passport id of the passport context the microservice is running under"),(0,s.kt)("hr",null),(0,s.kt)("h3",{id:"get-passportpublickey"},"GET /passport/publicKey"),(0,s.kt)("p",null,"Retrieves the passport public key of the passport context the microservice is running under"),(0,s.kt)("hr",null),(0,s.kt)("h3",{id:"post-passportdetails"},"POST /passport/details"),(0,s.kt)("p",null,"Retrieves the passport details about a passport by id"),(0,s.kt)("h5",{id:"example-request"},"Example Request:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'{\n    "passportId":"d7bc3488073454a6ce32b13a1e8cda6a8bddf16d"\n}\n')),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"passportId")," (string) - the passport to get the details of")),(0,s.kt)("h5",{id:"example-response"},"Example Response:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'{\n    "id":"d7bc3488073454a6ce32b13a1e8cda6a8bddf16d",\n    "isBlacklisted":false,\n    "blacklistReason":null,\n    "isNetworkPartner":true,\n    "isVerificationPartner":true,\n    "partnerName": "Bridge Protocol Corporation",\n    "partnerAddresses": [ \n        "https://*.bridgeprotocol.io"\n    ]\n}\n')),(0,s.kt)("hr",null),(0,s.kt)("h3",{id:"post-passportidfromkey"},"POST /passport/idfromkey"),(0,s.kt)("p",null,"Retrieves the passport id from any passport public key"),(0,s.kt)("h5",{id:"example-request-1"},"Example Request:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'{\n    "publicKey":"2d2d2d2d2d424547494e20504750205055424c4943..."\n}\n')),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"publicKey")," (string) - the passport public key to get the passport id from")),(0,s.kt)("hr",null),(0,s.kt)("h3",{id:"post-passportsign"},"POST /passport/sign"),(0,s.kt)("p",null,"Signs a message using the private key of the context passport"),(0,s.kt)("h5",{id:"example-request-2"},"Example Request:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'{\n    "message":"test message here"\n}\n')),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"message")," (string) - the message to be signed")),(0,s.kt)("hr",null),(0,s.kt)("h3",{id:"post-passportverify"},"POST /passport/verify"),(0,s.kt)("p",null,"Verifies that a message signature was signed by the public key"),(0,s.kt)("h5",{id:"example-request-3"},"Example Request:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'{\n    "signature":"2d2d2d2d2d424547494e20504750204d4553534147...",\n    "publicKey":"2d2d2d2d2d424547494e20504750205055424c4943..."\n}\n')),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"signature")," (string) - the signature of the message"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"publicKey")," (string) - the public key of the signing passport ")),(0,s.kt)("hr",null),(0,s.kt)("h3",{id:"post-passportverifyhash"},"POST /passport/verifyhash"),(0,s.kt)("p",null,"Verifies the SHA256 hash of a message"),(0,s.kt)("h5",{id:"example-request-4"},"Example Request:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'{\n    "message":"test message here",\n    "hash":"81041617a8602dd32c003860b91d7677f5706f81b4af9e5e4a9204cb7d80f5b9"\n}\n')),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"message")," (string) - the message to verify"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"hash")," (string) - the hash of the message to verify")),(0,s.kt)("hr",null),(0,s.kt)("h3",{id:"post-passportencrypt"},"POST /passport/encrypt"),(0,s.kt)("p",null,"Encrypts a message using the private key of the context passport to be decrypted by the target public key"),(0,s.kt)("h5",{id:"example-request-5"},"Example Request:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'{ \n    "message":"test message here",\n    "publicKey":"2d2d2d2d2d424547494e2050475020505542..."\n}\n')),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"message")," (string) - the message to be encrypted"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"publicKey")," (string) - the passport public key to encrypt the message for")),(0,s.kt)("hr",null),(0,s.kt)("h3",{id:"post-passportdecrypt"},"POST /passport/decrypt"),(0,s.kt)("p",null,"Decrypts a message signed and encrypted by the public key using the private key of the context passport."),(0,s.kt)("h5",{id:"example-request-6"},"Example Request:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'{\n    "encrypted":"2d2d2d2d2d424547494e20504750204d4553...",\n    "publicKey":"2d2d2d2d2d424547494e2050475020505542..."\n}\n')),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"encrypted")," (string) - the encrypted message"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"publicKey")," (string) - the passport public key of the passport that signed and encrypted the message")),(0,s.kt)("hr",null),(0,s.kt)("h3",{id:"post-passportrequestclaimsimport"},"POST /passport/requestclaimsimport"),(0,s.kt)("p",null,"Creates a secure encrypted claims import request for a collection of claims for the target public key"),(0,s.kt)("h5",{id:"example-request-7"},"Example Request:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'{\n    "claims":[{\n        "claimTypeId":3,\n        "claimValue":"someuser@bridgeprotocol.io",\n        "createdOn":1551180491,\n        "expiresOn":0\n    }],\n    "publicKey":"2d2d2d2d2d424547494e205047502050..."\n}\n')),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"claims")," (claim[]) - the claims to be signed, encrypted, and included in the claims import request"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"publicKey")," (string) - the public key of the passport to receive the claims import request")),(0,s.kt)("hr",null),(0,s.kt)("h3",{id:"post-passportrequestauth"},"POST /passport/requestauth"),(0,s.kt)("p",null,"Creates a signed authentication request "),(0,s.kt)("h5",{id:"example-request-8"},"Example Request:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'{\n    "token":"12345",\n    "claimTypes":["3"],\n    "networks":[\n        "neo",\n        "eth"\n    ]\n}\n')),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"token")," (string) - unique token to be included in the response"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"claimTypes")," (string[]) - the claim types to request from the target passport"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"networks")," (string[]) - the networks to request the blockchain addresses of ")),(0,s.kt)("hr",null),(0,s.kt)("h3",{id:"post-passportverifyauth"},"POST /passport/verifyauth"),(0,s.kt)("p",null,"Verifies a signed and encrypted authentication response received from a passport"),(0,s.kt)("h5",{id:"example-request-9"},"Example Request:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'{\n    "response":"d72216034623462346234623462326433...",\n    "token":"12345"\n}\n')),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"response")," (string) - the authentication response received"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"token")," (string) - the token included in the request used to verify the integrity of the response")),(0,s.kt)("h5",{id:"example-response-1"},"Example Response:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'{\n    "passportId":"fc5fe52784bf7149648d87aa9f17aabff1c68a64",\n    "publicKey":"2d2d2d2d2d424547494e205047502050...",\n    "tokenVerified":true,\n    "claims":[\n        {\n            "claimTypeId":3,\n            "claimValue":"someuser@bridgeprotocol.io",\n            "createdOn":1551180491,\n            "expiresOn":0,\n            "signedByKey":"2d2d2d2d2d424547494e20504750205055424...",\n            "signature":"2d2d2d2d2d424547494e20504750204d4...",\n            "signedById":"d7bc3488073454a6ce32b13a1e8cda6a8bddf16d",\n            "signatureValid":true,\n            "signedByPartner":true\n        }\n    ],\n    "blockchainAddresses":[\n        {\n            "network":"NEO",\n            "address":"AXbopuA5SPv5EVQP5REer4kdwMXpjRC7YQ"\n        },\n        {\n            "network":"ETH",\n            "address":"0x9375d3fb67bedfc27cb6cb9dd73ea8565427ca5b"\n        }\n    ]\n}\n')),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"passportId")," (string) - passport id of the passport that sent the response"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"publicKey")," (string) - public key of the passport that sent the response"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"tokenVerified")," (bool) - whether or not the token in the response was valid"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"claims")," (claim[]) - the claims sent in the response"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"blockchainAddresses")," (address[]) -  the blockchain addresses sent in the response")),(0,s.kt)("hr",null),(0,s.kt)("h3",{id:"post-passportrequestpayment"},"POST /passport/requestpayment"),(0,s.kt)("p",null,"Creates a signed BRDG payment request"),(0,s.kt)("h5",{id:"example-request-10"},"Example Request:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'{\n    "network":"neo",\n    "amount":1,\n    "address":"AXbopuA5SPv5EVQP5REer4kdwMXpjRC7YQ",\n    "identifier":"12345"\n}\n')),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"network")," (string) - the blockchain network to request payment on"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"amount")," (int) - the amount to request"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"address")," (string) - blockchain address to send the payment to"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"identifier")," (string) - the unique identifier for the transaction")),(0,s.kt)("hr",null),(0,s.kt)("h3",{id:"post-passportverifypayment"},"POST /passport/verifypayment"),(0,s.kt)("p",null,"Verifies a signed and encrypted BRDG payment response and returns the details of the payment"),(0,s.kt)("h5",{id:"example-request-11"},"Example Request:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'{\n    "response":"d72216034623462346234623462326433..."\n}\n')),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"response")," (string) - the payment response message sent by the passport the payment was requested from")),(0,s.kt)("h5",{id:"example-response-2"},"Example Response:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'{\n    "network":"NEO",\n    "from":"AXbopuA5SPv5EVQP5REer4kdwMXpjRC7YQ",\n    "amount":1,\n    "address":"AXbopuA5SPv5EVQP5REer4kdwMXpjRC7YQ",\n    "identifier":"12345",\n    "transactionId":"Transaction12345",\n    "passportId":"fc5fe52784bf7149648d87aa9f17aabff1c68a64"\n}\n')),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"network")," (string) - the blockchain network the payment was sent on"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"from")," (string) - the address the payment was sent from"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"amount")," (int) - the amount that was sent"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"address")," (string) - the address the payment was sent to "),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"identifier")," (string) - the unique identifier of the transaction from the request"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"transactionId")," (string) - the blockchain transaction identifier"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"passportId")," (string) - the passport id of the passport that sent the payment")))}m.isMDXComponent=!0}}]);