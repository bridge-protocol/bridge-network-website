"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9357],{3905:function(e,t,r){r.d(t,{Zo:function(){return s},kt:function(){return u}});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var c=a.createContext({}),p=function(e){var t=a.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},s=function(e){var t=p(e.components);return a.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,c=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),m=p(r),u=n,k=m["".concat(c,".").concat(u)]||m[u]||d[u]||i;return r?a.createElement(k,l(l({ref:t},s),{},{components:r})):a.createElement(k,l({ref:t},s))}));function u(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,l=new Array(i);l[0]=m;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:n,l[1]=o;for(var p=2;p<i;p++)l[p]=r[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},8426:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return o},contentTitle:function(){return c},metadata:function(){return p},toc:function(){return s},default:function(){return m}});var a=r(7462),n=r(3366),i=(r(7294),r(3905)),l=["components"],o={id:"sdk-models-claimpackage",title:"Claim Package",sidebar_label:"Claim Package"},c=void 0,p={unversionedId:"sdk-models-claimpackage",id:"sdk-models-claimpackage",title:"Claim Package",description:"The claim package is a package containing encrypted claim data that can only be decrypted and viewed by the passport that it was signed and encrypted for.",source:"@site/docs/sdk-models-claimpackage.md",sourceDirName:".",slug:"/sdk-models-claimpackage",permalink:"/docs/sdk-models-claimpackage",tags:[],version:"current",frontMatter:{id:"sdk-models-claimpackage",title:"Claim Package",sidebar_label:"Claim Package"},sidebar:"gettingStarted",previous:{title:"Claim",permalink:"/docs/sdk-models-claim"},next:{title:"Passport",permalink:"/docs/sdk-models-passport"}},s=[{value:"Constructor",id:"constructor",children:[],level:2},{value:"Properties",id:"properties",children:[],level:2},{value:"Functions",id:"functions",children:[{value:"fromClaim()",id:"fromclaim",children:[],level:3},{value:"decrypt()",id:"decrypt",children:[],level:3}],level:2}],d={toc:s};function m(e){var t=e.components,r=(0,n.Z)(e,l);return(0,i.kt)("wrapper",(0,a.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The claim package is a package containing encrypted claim data that can only be decrypted and viewed by the passport that it was signed and encrypted for."),(0,i.kt)("h2",{id:"constructor"},"Constructor"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"ClaimPackage(")," typeId, signedBy, claim ",(0,i.kt)("strong",{parentName:"p"},")")),(0,i.kt)("h2",{id:"properties"},"Properties"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"typeId")," (string) - the type of the claim contained in the package"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"signedBy")," (string) - the public key of the passport that signed and encrypted the claim"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"claim")," (string) - the encrypted hex encoded claim payload")),(0,i.kt)("h2",{id:"functions"},"Functions"),(0,i.kt)("h3",{id:"fromclaim"},"fromClaim()"),(0,i.kt)("p",null,"Creates a claim package from a ",(0,i.kt)("a",{href:"sdk-models-claim"},"Claim")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"async fromClaim(claim, targetPublicKey, passportPublicKey, passportPrivateKey, password)\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"claim")," (",(0,i.kt)("a",{href:"sdk-models-claim"},"Claim"),") - the claim to include in the claim package"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"targetPublicKey")," (string) - the target passport public key to encrypt the claim package for"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"passportPublicKey")," (string) - the public key of the signing and encrypting passport"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"passportPrivateKey")," (string) - the private key of the signing and encrypting passport"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"password")," (string) - the password to unlock the private key of the signing and encrypting passport")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"decrypt"},"decrypt()"),(0,i.kt)("p",null,"Decrypts the claim package and returns a ",(0,i.kt)("a",{href:"sdk-models-claim"},"Claim")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"async decrypt(privateKey, password)\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"privateKey")," (string) - the private key of the decrypting passport"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"password")," (string) - the password to unlock private key of the decrypting passport")))}m.isMDXComponent=!0}}]);