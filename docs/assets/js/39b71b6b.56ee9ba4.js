"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5665],{3905:function(e,t,n){n.d(t,{Zo:function(){return k},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),l=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},k=function(e){var t=l(e.components);return r.createElement(i.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,i=e.parentName,k=p(e,["components","mdxType","originalType","parentName"]),c=l(n),d=a,m=c["".concat(i,".").concat(d)]||c[d]||u[d]||s;return n?r.createElement(m,o(o({ref:t},k),{},{components:n})):r.createElement(m,o({ref:t},k))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,o=new Array(s);o[0]=c;var p={};for(var i in t)hasOwnProperty.call(t,i)&&(p[i]=t[i]);p.originalType=e,p.mdxType="string"==typeof e?e:a,o[1]=p;for(var l=2;l<s;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},2032:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return p},contentTitle:function(){return i},metadata:function(){return l},toc:function(){return k},default:function(){return c}});var r=n(7462),a=n(3366),s=(n(7294),n(3905)),o=["components"],p={id:"sdk-services-tokenswap",title:"Token Swap",sidebar_label:"Token Swap"},i=void 0,l={unversionedId:"sdk-services-tokenswap",id:"sdk-services-tokenswap",title:"Token Swap",description:"Service to retrieve the status of Token Swaps received by the Bridge Network",source:"@site/docs/sdk-services-tokenswap.md",sourceDirName:".",slug:"/sdk-services-tokenswap",permalink:"/docs/sdk-services-tokenswap",tags:[],version:"current",frontMatter:{id:"sdk-services-tokenswap",title:"Token Swap",sidebar_label:"Token Swap"},sidebar:"gettingStarted",previous:{title:"Profile",permalink:"/docs/sdk-services-profile"},next:{title:"Request Relay",permalink:"/docs/sdk-services-relay"}},k=[{value:"Functions",id:"functions",children:[{value:"createTokenSwap()",id:"createtokenswap",children:[],level:3},{value:"getTokenSwapList()",id:"gettokenswaplist",children:[],level:3},{value:"getPendingTokenSwapList()",id:"getpendingtokenswaplist",children:[],level:3},{value:"getTokenSwap()",id:"gettokenswap",children:[],level:3},{value:"updatePaymentTransaction()",id:"updatepaymenttransaction",children:[],level:3},{value:"retry()",id:"retry",children:[],level:3}],level:2}],u={toc:k};function c(e){var t=e.components,n=(0,a.Z)(e,o);return(0,s.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"Service to retrieve the status of Token Swaps received by the Bridge Network"),(0,s.kt)("h2",{id:"functions"},"Functions"),(0,s.kt)("h3",{id:"createtokenswap"},"createTokenSwap()"),(0,s.kt)("p",null,"Create a new token swap request for the passport"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"async createTokenSwap(passport, passphrase, network, address, recipientAddress, amount)\n")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"passport")," (",(0,s.kt)("a",{href:"sdk-models-passport"},"Passport"),") - passport context used for API authentication"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"passphrase")," (string) - password used to unlock context passport private key"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"network")," (string) - the blockchain network the tokens will be swapped from"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"address")," (string) - the bloockchain address the swap will be sent from"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"recipientAddress")," (string) - the blockcahin address the swapped tokens will be sent to"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"amount")," (decimal) - the amount of BRDG token to be swapped")),(0,s.kt)("hr",null),(0,s.kt)("h3",{id:"gettokenswaplist"},"getTokenSwapList()"),(0,s.kt)("p",null,"Retrieve all token swaps for the passport"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"async getTokenSwapList(passport, passphrase)\n")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"passport")," (",(0,s.kt)("a",{href:"sdk-models-passport"},"Passport"),") - passport context used for API authentication"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"passphrase")," (string) - password used to unlock context passport private key")),(0,s.kt)("hr",null),(0,s.kt)("h3",{id:"getpendingtokenswaplist"},"getPendingTokenSwapList()"),(0,s.kt)("p",null,"Retrieve all pending token swaps for the passport"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"async getPendingTokenSwapList(passport, passphrase)\n")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"passport")," (",(0,s.kt)("a",{href:"sdk-models-passport"},"Passport"),") - passport context used for API authentication"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"passphrase")," (string) - password used to unlock context passport private key")),(0,s.kt)("hr",null),(0,s.kt)("h3",{id:"gettokenswap"},"getTokenSwap()"),(0,s.kt)("p",null,"Retrieve the full details of a specific token swap"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"async getTokenSwap(passport, passphrase, id)\n")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"passport")," (",(0,s.kt)("a",{href:"sdk-models-passport"},"Passport"),") - passport context used for API authentication"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"passphrase")," (string) - password used to unlock context passport private key"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"id")," (string) - unique identifier of the token swap")),(0,s.kt)("hr",null),(0,s.kt)("h3",{id:"updatepaymenttransaction"},"updatePaymentTransaction()"),(0,s.kt)("p",null,"Updates an existing token swap request with the BRDG transfer transaction information and gas prepayment (if required)"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"async updatePaymentTransaction(passport, passphrase, id, transactionId, gasTransactionId)\n")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"passport")," (",(0,s.kt)("a",{href:"sdk-models-passport"},"Passport"),") - passport context used for API authentication"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"passphrase")," (string) - password used to unlock context passport private key"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"id")," (string) - the unique identifier of the token swap"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"transactionId")," (string) - the blockchain transaction id of the BRDG token transfer to the swap address"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"gasTransactionId")," (string) - the blockchain gas prepayment transaction id (only required if transferring from NEO to Ethereum)")),(0,s.kt)("hr",null),(0,s.kt)("h3",{id:"retry"},"retry()"),(0,s.kt)("p",null,"Attempt to (re)process a token swap that is waiting for a transaction"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"async retry(passport, passphrase, id)\n")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"passport")," (",(0,s.kt)("a",{href:"sdk-models-passport"},"Passport"),") - passport context used for API authentication"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"passphrase")," (string) - password used to unlock context passport private key"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"id")," - the unique identifier of token swap")))}c.isMDXComponent=!0}}]);