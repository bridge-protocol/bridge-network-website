"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9231],{3905:function(e,t,r){r.d(t,{Zo:function(){return c},kt:function(){return d}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var a=n.createContext({}),l=function(e){var t=n.useContext(a),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},c=function(e){var t=l(e.components);return n.createElement(a.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,a=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),f=l(r),d=o,k=f["".concat(a,".").concat(d)]||f[d]||u[d]||i;return r?n.createElement(k,s(s({ref:t},c),{},{components:r})):n.createElement(k,s({ref:t},c))}));function d(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,s=new Array(i);s[0]=f;var p={};for(var a in t)hasOwnProperty.call(t,a)&&(p[a]=t[a]);p.originalType=e,p.mdxType="string"==typeof e?e:o,s[1]=p;for(var l=2;l<i;l++)s[l]=r[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},9742:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return p},contentTitle:function(){return a},metadata:function(){return l},toc:function(){return c},default:function(){return f}});var n=r(7462),o=r(3366),i=(r(7294),r(3905)),s=["components"],p={id:"sdk-services-profile",title:"Profile",sidebar_label:"Profile"},a=void 0,l={unversionedId:"sdk-services-profile",id:"sdk-services-profile",title:"Profile",description:"Service to retrieve the Bridge Network known claim profile types.  Profile types are used for convenience by network partners to define a group of claim types used for a specific purpose - ie: KYC, AML.",source:"@site/docs/sdk-services-profile.md",sourceDirName:".",slug:"/sdk-services-profile",permalink:"/docs/sdk-services-profile",tags:[],version:"current",frontMatter:{id:"sdk-services-profile",title:"Profile",sidebar_label:"Profile"},sidebar:"gettingStarted",previous:{title:"Passport",permalink:"/docs/sdk-services-passport"},next:{title:"Token Swap",permalink:"/docs/sdk-services-tokenswap"}},c=[{value:"Functions",id:"functions",children:[{value:"getAllTypes()",id:"getalltypes",children:[],level:3},{value:"getType()",id:"gettype",children:[],level:3}],level:2}],u={toc:c};function f(e){var t=e.components,r=(0,o.Z)(e,s);return(0,i.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Service to retrieve the Bridge Network known claim profile types.  Profile types are used for convenience by network partners to define a group of claim types used for a specific purpose - ie: KYC, AML."),(0,i.kt)("h2",{id:"functions"},"Functions"),(0,i.kt)("h3",{id:"getalltypes"},"getAllTypes()"),(0,i.kt)("p",null,"Retrieve all known profile types on the Bridge Network"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"async getAllProfileTypes(useApi, passport, passphrase)\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"useApi")," (bool) - whether or not to use the local constants or retrieve from Bridge Network API"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"passport")," (",(0,i.kt)("a",{href:"sdk-models-passport"},"Passport"),") - passport context used for API authentication, only required if useApi=true"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"passphrase")," (string) - password used to unlock context passport private key, only required if useApi=true")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"gettype"},"getType()"),(0,i.kt)("p",null,"Retrieve specific known profile type definition"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"async getProfileType(profileTypeId, useApi, passport, passphrase)\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"useApi")," (bool) - whether or not to use the local constants or retrieve from Bridge Network API"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"passport")," (",(0,i.kt)("a",{href:"sdk-models-passport"},"Passport"),") - passport context used for API authentication, only required if useApi=true"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"passphrase")," (string) - password used to unlock context passport private key, only required if useApi=true")))}f.isMDXComponent=!0}}]);