"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1535],{3905:function(e,t,r){r.d(t,{Zo:function(){return c},kt:function(){return d}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),p=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=p(r),d=a,g=m["".concat(s,".").concat(d)]||m[d]||u[d]||i;return r?n.createElement(g,l(l({ref:t},c),{},{components:r})):n.createElement(g,l({ref:t},c))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,l=new Array(i);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var p=2;p<i;p++)l[p]=r[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},9228:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return o},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return c},default:function(){return m}});var n=r(7462),a=r(3366),i=(r(7294),r(3905)),l=["components"],o={id:"sdk-models-claim",title:"Claim",sidebar_label:"Claim"},s=void 0,p={unversionedId:"sdk-models-claim",id:"sdk-models-claim",title:"Claim",description:"The claim model represents a claim sent from one passport to another.",source:"@site/docs/sdk-models-claim.md",sourceDirName:".",slug:"/sdk-models-claim",permalink:"/docs/sdk-models-claim",tags:[],version:"current",frontMatter:{id:"sdk-models-claim",title:"Claim",sidebar_label:"Claim"},sidebar:"gettingStarted",previous:{title:"Examples",permalink:"/docs/sdk-examples"},next:{title:"Claim Package",permalink:"/docs/sdk-models-claimpackage"}},c=[{value:"Constructor",id:"constructor",children:[],level:2},{value:"Properties",id:"properties",children:[],level:2},{value:"Functions",id:"functions",children:[{value:"encrypt()",id:"encrypt",children:[],level:3},{value:"fromClaimPackage()",id:"fromclaimpackage",children:[],level:3},{value:"verifySignature()",id:"verifysignature",children:[],level:3},{value:"getSignatureString()",id:"getsignaturestring",children:[],level:3}],level:2}],u={toc:c};function m(e){var t=e.components,r=(0,a.Z)(e,l);return(0,i.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The claim model represents a claim sent from one passport to another."),(0,i.kt)("h2",{id:"constructor"},"Constructor"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Claim(")," claimData ",(0,i.kt)("strong",{parentName:"p"},")")),(0,i.kt)("h2",{id:"properties"},"Properties"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"claimTypeId")," (string) - the claim type"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"claimValue")," (string) - the value of the claim"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"createdOn")," (long) - the unix timestamp of the creation date"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"expiresOn")," (long) - the unix timestamp of the expiration date (0 = does not expire)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"signedByKey")," (string) - the public key of the signer of the claim"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"signature")," (string) - the signature of the claim"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"identifier")," (string) - returns a serialized string of the timestamp, type and value"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"isExpired")," (bool) - whether or not the claim is expired"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"isValid")," (bool) - whether or not the claim has all required data to be valid"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"hash")," (string) - returns the SHA256 hash of the claim value")),(0,i.kt)("h2",{id:"functions"},"Functions"),(0,i.kt)("h3",{id:"encrypt"},"encrypt()"),(0,i.kt)("p",null,"Serializes and encrypts the claim data for the target passport"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"async encrypt(targetPublicKey, passportPrivateKey, password)\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"targetPublicKey")," (string)- the target public key the claim should be encrypted for"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"passportPrivateKey")," (string)- the private key of the passport encrypting the claim"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"password")," (string)- the password to unlock the private key of the passport encrypting the claim")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"fromclaimpackage"},"fromClaimPackage()"),(0,i.kt)("p",null,"Decrypts and loads the claim from an encrypted claim package"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"async fromClaimPackage(claimPackage, privateKey, password)\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"claimPackage")," (",(0,i.kt)("a",{href:"sdk-models-claimpackage"},"ClaimPackage"),") - the claim package to load the claim from"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"privateKey")," (string) - the private key of the loading passport"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"password")," (string) - the password to unlock the private key of the loading passport")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"verifysignature"},"verifySignature()"),(0,i.kt)("p",null,"Verifies the signature of the claim is valid"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"async verifySignature(passportId)\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"passportId")," (string) - the passport context to verify the signature for")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"getsignaturestring"},"getSignatureString()"),(0,i.kt)("p",null,"Retrieves the unique fingerprint for the claim used for signing and integrity verification"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"async getSignatureString(passportId)\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"passportId")," (string) - the passport context the claim should be signed or verified for")))}m.isMDXComponent=!0}}]);